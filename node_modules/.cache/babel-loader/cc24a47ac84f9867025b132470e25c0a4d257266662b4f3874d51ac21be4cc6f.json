{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/lev/mgtu/yip/laba7/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/lev/mgtu/yip/laba7/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _jsxFileName = \"/home/lev/mgtu/yip/laba7/src/app/App.js\";\nimport { Component } from 'react';\nimport { TodoPage } from '../pages/TodoPage/TodoPage';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport { Layout } from '../pages/Layout';\nimport { AppContext } from './context';\n\n// Создание роутера приложения, который в зависимости от url отрисовывает\n// определенную компоненту\n// Ссылка на документацию: https://reactrouter.com/en/main/start/tutorial (демонстрация нового API)\n// Ссылка на видеокурс по маршрутизации: https://www.youtube.com/playlist?list=PLiZoB8JBsdznY1XwBcBhHL9L7S_shPGVE (старый API, но смысл такой же)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  // Корневая компонента по url: \"/\". Она отрисовывает лэйаут приложения,\n  // куда подставляется контент странички\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 18\n  }, this),\n  // Вложенные роуты, которые будут подставляться в лэйаут\n  children: [{\n    // Это свойство позволяет задать элемент по умолчанию для родительского роута\n    // То есть, если в адресной строке url будет \"/\", то отрисуется этот element\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 26\n    }, this)\n  }, {\n    path: '/login',\n    element: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041B\\u043E\\u0433\\u0438\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 26\n    }, this)\n  }, {\n    path: '/todos',\n    element: /*#__PURE__*/_jsxDEV(TodoPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 26\n    }, this),\n    index: true\n  }, {\n    path: '/register',\n    element: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 26\n    }, this)\n  }]\n}, {\n  // Другой корневой url-путь, который тоже может содержать лейаут, а может и нет\n  path: '/root',\n  element: /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"\\u0414\\u0440\\u0443\\u0433\\u043E\\u0439 \\u043B\\u0435\\u0439\\u0430\\u0443\\u0442\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 18\n  }, this)\n}]);\n\n// Компонента приложения, которая содержит состояние приложения. Именно она вмортируется в div#root, который\n// описан в index.html\nvar _login = /*#__PURE__*/_classPrivateFieldLooseKey(\"login\");\nvar _logout = /*#__PURE__*/_classPrivateFieldLooseKey(\"logout\");\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Задаем объект пользователя\n    // Метод, имитирующий процесс выхода из приложения\n    Object.defineProperty(this, _logout, {\n      value: _logout2\n    });\n    // Метод, имитирующий процесс авторизации пользователя\n    Object.defineProperty(this, _login, {\n      value: _login2\n    });\n    this.state = {\n      user: undefined\n    };\n  }\n\n  // Метод отрисовки компоненты\n  render() {\n    return (\n      /*#__PURE__*/\n      // Провайдинг контекста. Контекст работает по принципу шины. Через него компонента App\n      // предоставляет данные дочерним компонентам. Использование контекста позволяет избежать такой проблемы\n      // как props drilling или сквозной передачи пропсов через множество компонент.\n      // Контекст имеет пропс value, куда мы передаем объект, содержащий данные контекста\n      // Видеоролик по React Context: https://www.youtube.com/watch?v=W_-TO_reSGs\n      // В этом ролике автор показывает синтаксис работы с контекстом для функциональных компонент. В целом можете использовать пример,\n      // который рассматривали на семинар, но так же можете воспользоваться примером из урока\n      _jsxDEV(AppContext.Provider, {\n        value: {\n          user: this.state.user,\n          login: _classPrivateFieldLooseBase(this, _login)[_login].bind(this),\n          logout: _classPrivateFieldLooseBase(this, _logout)[_logout].bind(this)\n        },\n        children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n          router: router\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }, this)\n    );\n  }\n}\nfunction _login2() {\n  this.setState({\n    user: {\n      name: 'Вася Пупкин',\n      email: 'Почта'\n    }\n  });\n}\nfunction _logout2() {\n  this.setState({\n    user: undefined\n  });\n}","map":{"version":3,"names":["Component","TodoPage","createBrowserRouter","RouterProvider","Layout","AppContext","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","_login","_classPrivateFieldLooseKey","_logout","App","constructor","props","Object","defineProperty","value","_logout2","_login2","state","user","undefined","render","Provider","login","_classPrivateFieldLooseBase","bind","logout","setState","name","email"],"sources":["/home/lev/mgtu/yip/laba7/src/app/App.js"],"sourcesContent":["import { Component } from 'react'\nimport { TodoPage } from '../pages/TodoPage/TodoPage';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport { Layout } from '../pages/Layout';\nimport { AppContext } from './context';\n\n// Создание роутера приложения, который в зависимости от url отрисовывает\n// определенную компоненту\n// Ссылка на документацию: https://reactrouter.com/en/main/start/tutorial (демонстрация нового API)\n// Ссылка на видеокурс по маршрутизации: https://www.youtube.com/playlist?list=PLiZoB8JBsdznY1XwBcBhHL9L7S_shPGVE (старый API, но смысл такой же)\nconst router = createBrowserRouter([\n    {\n        // Корневая компонента по url: \"/\". Она отрисовывает лэйаут приложения,\n        // куда подставляется контент странички\n        path: '/',\n        element: <Layout />,\n        // Вложенные роуты, которые будут подставляться в лэйаут\n        children: [\n            {\n                // Это свойство позволяет задать элемент по умолчанию для родительского роута\n                // То есть, если в адресной строке url будет \"/\", то отрисуется этот element\n                index: true,\n                element: <h1>Главная страница</h1>\n            },\n            {\n                path: '/login',\n                element: <h1>Логин</h1>\n            },\n            {\n                path: '/todos',\n                element: <TodoPage />,\n                index: true\n            },\n            {\n                path: '/register',\n                element: <h1>Регистрация</h1>\n            }\n        ]\n    },\n    {\n        // Другой корневой url-путь, который тоже может содержать лейаут, а может и нет\n        path: '/root',\n        element: <h2>Другой лейаут</h2>\n    }\n])\n\n// Компонента приложения, которая содержит состояние приложения. Именно она вмортируется в div#root, который\n// описан в index.html\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n\n        // Задаем объект пользователя\n        this.state = {\n            user: undefined\n        };\n    }\n\n    // Метод отрисовки компоненты\n    render() {\n        return (\n            // Провайдинг контекста. Контекст работает по принципу шины. Через него компонента App\n            // предоставляет данные дочерним компонентам. Использование контекста позволяет избежать такой проблемы\n            // как props drilling или сквозной передачи пропсов через множество компонент.\n            // Контекст имеет пропс value, куда мы передаем объект, содержащий данные контекста\n            // Видеоролик по React Context: https://www.youtube.com/watch?v=W_-TO_reSGs\n            // В этом ролике автор показывает синтаксис работы с контекстом для функциональных компонент. В целом можете использовать пример,\n            // который рассматривали на семинар, но так же можете воспользоваться примером из урока\n           <AppContext.Provider value={{\n                user: this.state.user,\n                login: this.#login.bind(this),\n                logout: this.#logout.bind(this)\n            }}>\n                {/* // Компонента провайдинга роутера. Ее использование важно для работы маршрутизации приложения\n                // Чтобы роутер заработал, ему необходмо передатать объект конфигурации роутера в качестве пропса */}\n                <RouterProvider router={router} />\n           </AppContext.Provider>\n        );\n    }\n\n    // Метод, имитирующий процесс авторизации пользователя\n    #login() {\n        this.setState({\n            user: {\n                name: 'Вася Пупкин',\n                email: 'Почта'\n            }\n        })\n    }\n\n    // Метод, имитирующий процесс выхода из приложения\n    #logout() {\n        this.setState({\n            user: undefined\n        })\n    }\n}"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,UAAU,QAAQ,WAAW;;AAEtC;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGN,mBAAmB,CAAC,CAC/B;EACI;EACA;EACAO,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACH,MAAM;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACnB;EACAC,QAAQ,EAAE,CACN;IACI;IACA;IACAC,KAAK,EAAE,IAAI;IACXN,OAAO,eAAEH,OAAA;MAAAQ,QAAA,EAAI;IAAgB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACrC,CAAC,EACD;IACIL,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEH,OAAA;MAAAQ,QAAA,EAAI;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC1B,CAAC,EACD;IACIL,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEH,OAAA,CAACN,QAAQ;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACrBE,KAAK,EAAE;EACX,CAAC,EACD;IACIP,IAAI,EAAE,WAAW;IACjBC,OAAO,eAAEH,OAAA;MAAAQ,QAAA,EAAI;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAChC,CAAC;AAET,CAAC,EACD;EACI;EACAL,IAAI,EAAE,OAAO;EACbC,OAAO,eAAEH,OAAA;IAAAQ,QAAA,EAAI;EAAa;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI;AAClC,CAAC,CACJ,CAAC;;AAEF;AACA;AAAA,IAAAG,MAAA,gBAAAC,0BAAA;AAAA,IAAAC,OAAA,gBAAAD,0BAAA;AACA,OAAO,MAAME,GAAG,SAASpB,SAAS,CAAC;EAC/BqB,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;;IAEZ;IAsCJ;IAAAC,MAAA,CAAAC,cAAA,OAAAL,OAAA;MAAAM,KAAA,EAAAC;IAAA;IAVA;IAAAH,MAAA,CAAAC,cAAA,OAAAP,MAAA;MAAAQ,KAAA,EAAAE;IAAA;IA3BI,IAAI,CAACC,KAAK,GAAG;MACTC,IAAI,EAAEC;IACV,CAAC;EACL;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACL;MAAA;MACI;MACA;MACA;MACA;MACA;MACA;MACA;MACDxB,OAAA,CAACF,UAAU,CAAC2B,QAAQ;QAACP,KAAK,EAAE;UACvBI,IAAI,EAAE,IAAI,CAACD,KAAK,CAACC,IAAI;UACrBI,KAAK,EAAEC,2BAAA,KAAI,EAAAjB,MAAA,EAAAA,MAAA,EAAQkB,IAAI,CAAC,IAAI,CAAC;UAC7BC,MAAM,EAAEF,2BAAA,KAAI,EAAAf,OAAA,EAAAA,OAAA,EAASgB,IAAI,CAAC,IAAI;QAClC,CAAE;QAAApB,QAAA,eAGER,OAAA,CAACJ,cAAc;UAACK,MAAM,EAAEA;QAAO;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IAAC;EAE7B;AAkBJ;AAAC,SAAAa,QAAA,EAfY;EACL,IAAI,CAACU,QAAQ,CAAC;IACVR,IAAI,EAAE;MACFS,IAAI,EAAE,aAAa;MACnBC,KAAK,EAAE;IACX;EACJ,CAAC,CAAC;AACN;AAAC,SAAAb,SAAA,EAGS;EACN,IAAI,CAACW,QAAQ,CAAC;IACVR,IAAI,EAAEC;EACV,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}